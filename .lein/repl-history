EXPLAIN ANALYZE (FORMAT JSON) SELECT * FROM title;
cons 1 2
(cons 1 2)
(conj [1] 2)
(cons [1] 2)
(cons 2 [1])
(cons [1] 2)
(cons 1 [2])
(clojure.string/split "1 2 3" " ")
(clojure.string/split "1 2 3" #" ")
(trim "hej ")
(trim "hej ")(quot (System/currentTimeMillis) 1000)
(quot (System/currentTimeMillis) 1000)
(use 'clj-diff.core)
(contains? :c {:a {:b {:c 3} 2} 1})
(contains? :c {:a {:b {:c 3}}})
(contains? {:a {:b {:c 3}}} :c)
(use 'clojure.walk)
(postwalk println {:a {:b {:c 3}}})
(postwalk #(contains? % :c) {:a {:b {:c 3}}})
(postwalk #(= % :c) {:a {:b {:c 3}}})
(postwalk #(if (keyword? %) (do (println %) %) %) {:a {:b {:c 3}}})
(postwalk #(if (and (keyword? %) (= % :c)) (do (println %) %) %) {:a {:b {:c 3}}})
(prewalk #(if (and (keyword? %) (= % :c)) (do (println %) %) %) {:a {:b {:c 3}}})
(postwalk println {:a {:b {:c 3}}})
(contains? {:c 3} :c)
(get :a {:a 3})
(get {:a 3} :a)
(val {:a 3} :a)
(merge {:index "a"} {})
(merge {:index "a"} {:index "b"})
(merge {:index #{"a"}} {:index #{"b"}})
(merge-with concat {:index #{"a"}} {:index #{"b"}})
(merge-with conj {:index #{"a"}} {:index #{"b"}})
(merge-with cons {:index #{"a"}} {:index #{"b"}})
(merge-with clojure.set/union {:index #{"a"}} {:index #{"b"}})
(merge-with clojure.set/union {:index #{"a"}})
(def in [{:index #{"movie_info_idx_idx_infotypeid"}}]
)
(coll? in)
(reduce #(merge-with clojure.set/union %1 %2) o {})
(reduce #(merge-with clojure.set/union %1 %2) {} in)
(reduce #(merge-with clojure.set/union %1 %2) in {})
(reduce #(merge-with clojure.set/union %1 %2) {} in)
(use 'clojure.data)
(diff {:a 1} {:a 1 :b 2})
(diff {:a 1 :b3} {:a 1 :b 2})
(diff {:a 1 :b 3} {:a 1 :b 2})
(def tree-a {:a [{:b 1} {:c 2}]} {:a [{:b 2} {:c 2}]})
(diff {:a [{:b 1} {:c 2}]} {:a [{:b 2} {:c 2}]})
